import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TOKEN')
YOUR_CHAT_ID = os.environ.get('YOUR_CHAT_ID')

# –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é –∏–∑ 15 –±–ª—é–¥
menu = {
    "coffee": {
        "name": "‚òïÔ∏è –ö–æ—Ñ–µ/—á–∞–π",
        "desc": "–ê—Ä–æ–º–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ –∏–ª–∏ –º—è–≥–∫–∏–π –∏ –≥—Ä–µ—é—â–∏–π –¥—É—à—É —á–∞–π –¥–ª—è –º–æ–µ–π –∫–æ—Ä–æ–ª–µ–≤—ã",
        "price": 1
    },
    "sandwich": {
        "name": "ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥",
        "desc": "–ù–µ–æ—Å–ø–æ—Ä–∏–º–∞—è –∫–ª–∞—Å—Å–∏–∫–∞: –ø—Ä–æ—Å—Ç–æ, –≤–∫—É—Å–Ω–æ, –±—ã—Å—Ç—Ä–æ",
        "price": 5
    },
    "tuna": {
        "name": "ü•ë –ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å —Ç—É–Ω—Ü–æ–º –∏ –∞–≤–æ–∫–∞–¥–æ",
        "desc": "–•—Ä—É—Å—Ç—è—â–∏–π —Ç–æ—Å—Ç —Å –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–º –≤–∫—É—Å–æ–º –∞–≤–æ–∫–∞–¥–æ –∏ —Ç—É–Ω—Ü–∞! –¢–æ —á—Ç–æ –Ω–∞–¥–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è",
        "price": 10
    },
    "salmon": {
        "name": "üêü –ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±–æ–π",
        "desc": "–î–æ—Ä–æ–≥–æ –±–æ–≥–∞—Ç–æ: –≤—Å–µ –ª—É—á—à–µ–µ –¥–ª—è –¥–∞–º—ã —Å–µ—Ä–¥—Ü–∞ –≤–µ–ª–∏–∫–æ–≥–æ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞...",
        "price": 15
    },
    "scramble": {
        "name": "ü•ö –°–∫—Ä—ç–º–±–ª",
        "desc": "–ù–µ–∂–Ω–µ–π—à–∏–π —Å–ª–∏–≤–æ—á–Ω—ã–π –æ–º–ª–µ—Ç –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å–æ –≤—Å–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ—Ç—Å—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ",
        "price": 10
    },
    "pancakes": {
        "name": "ü•û –ë–ª–∏–Ω—ã",
        "desc": "–ö—Ä—É—á—É-–≤–µ—Ä—á—É –æ–±–≤–æ—Ä–æ–∂–∏—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ —Ö–æ—á—É! –ù–∞—á–∏–Ω–∫–∞ –¥–ª—è –±–ª–∏–Ω–æ–≤ –∑–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ü–µ–Ω—É...)",
        "price": 20
    },
    "porridge": {
        "name": "ü•£ –ú–∞–Ω–Ω–∞—è –∫–∞—à–∞!!!",
        "desc": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è —ç—Ç–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ –±–ª—é–¥–æ! –§–∏—Ä–º–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å, –º–æ—è –ª—é–±–æ–≤—å!",
        "price": 1
    },
    "cutlets": {
        "name": "üçΩ –†—É–±–ª–µ–Ω–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã —Å –≥–∞—Ä–Ω–∏—Ä–æ–º",
        "desc": "–ü—Ä–æ—Å—Ç–æ–π, –Ω–æ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç! –í—Å–µ–º–∏ –ª—é–±–∏–º—ã–µ –∫–æ—Ç–ª–µ—Ç—ã —Å –Ω–µ–∂–Ω—ã–º –∏ —É—Ç–æ–Ω—á–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º, –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!",
        "price": 15
    },
    "cheeseburger": {
        "name": "üçî –î–≤–æ–π–Ω–æ–π —á–∏–∑–±—É—Ä–≥–µ—Ä",
        "desc": "–®–µ—Ñ-–ø–æ–≤–∞—Ä –Ω–µ —Å–∏–ª—å–Ω–æ –æ–¥–æ–±—Ä—è–µ—Ç.... –ù–æ –∫–∞–∫ –±—É–¥—Ç–æ –∏ –ë–∏–≥ —Å–ø—ç—à–ª –æ—Ö–æ—Ç–æ!",
        "price": 15
    },
    "cake": {
        "name": "üç∞ –¢–æ—Ä—Ç",
        "desc": "–ò–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∏ —Å–ª–∞–¥–µ–Ω—å–∫–æ–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å! –í–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –∞–≤—Ç–æ—Ä—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º —è–≥–æ–¥ –∏ –Ω–∞—á–∏–Ω–æ–∫",
        "price": 20
    },
    "pie": {
        "name": "ü•ß –ü–∏—Ä–æ–≥",
        "desc": "–ù—É –º—ë—ë—ë—ë—ë—ë–¥! –ò —Ö—Ä—É—Å—Ç –±–µ–∑–µ –∏ –≤—Å—ë –ø—Ä–∏—á–∞—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –ù–∞—á–∏–Ω–∫–∞ –Ω–∞ –í–∞—à –≤—ã–±–æ—Ä!",
        "price": 20
    },
    "curry": {
        "name": "üçõ –ö–∞—Ä—Ä–∏",
        "desc": "–¢—É—à–µ–Ω–∞—è –∫—É—Ä–æ—á–∫–∞ —Å –æ–≤–æ—â–∞–º–∏ - —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ? –¢–æ–ª—å–∫–æ –∫—É—Ä–æ—á–∫–∞ —Å –∫–∞—Ä—Ä–∏!",
        "price": 15
    },
    "dumplings": {
        "name": "ü•ü –ü–µ–ª—å–º–µ—à–∫–∏",
        "desc": "–ù—É —Ç—É—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∑–∞–π... –ü—Ä–æ—Å—Ç–æ, –≤–∫—É—Å–Ω–æ –∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ. –ü–æ –≤—Å–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ì–û–°–¢ - —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π",
        "price": 7
    },
    "teriyaki": {
        "name": "üçó –ö—É—Ä–æ—á–∫–∞ —Ç–µ—Ä–∏—è–∫–∏",
        "desc": "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫—É—Ö–Ω–∏. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å —Å–≤–æ–µ –≤–∫—É—Å–æ–≤–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–º –≤–∫—É—Å–æ–º –∫—É—Ä–æ—á–∫–∏",
        "price": 15
    },
    "lasagna": {
        "name": "üßÄ –õ–∞–∑–∞–Ω—å—è",
        "desc": "–ù—É —ç—Ç–æ –õ–ï–ì–ï–ù–î–ê! –ù–∞—à–∞ —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è! –ë–ª—é–¥–æ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —à–µ—Ñ-–ø–æ–≤–∞—Ä —É—Å—Ç—É–ø–∞–µ—Ç —Å–≤–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ø–æ–ø—Ä–∏—â–µ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–¥–º–∞—Å—Ç–µ—Ä—å–µ–º –≤–µ–ª–∏–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞",
        "price": 20
    }
}

compliments = [
    "–ó–∞—è, —Ç—ã ‚Äî –º–æ–µ —Å–∞–º–æ–µ —Å–ª–∞–¥–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üçØ",
    "–ó–∞—è, –±–µ–∑ —Ç–µ–±—è –¥–∞–∂–µ —Å–æ–ª–Ω—Ü–µ –Ω–µ —Ç–∞–∫–æ–µ —è—Ä–∫–æ–µ. üåû‚û°Ô∏èüåö",
    "–ó–∞—è, —Ç—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –º–∞–≥–Ω–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç —Å—á–∞—Å—Ç—å–µ. üß≤üíò",
    "–ó–∞—è, —Å —Ç–æ–±–æ–π –¥–∞–∂–µ –¥–æ–∂–¥—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ä–æ–º–∞–Ω—Ç–∏–∫—É. ‚òîÔ∏èüíï",
    "–ó–∞—è, —Ç—ã ‚Äî –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–≤–æ–¥ –¥–ª—è —É–ª—ã–±–∫–∏ —Å —É—Ç—Ä–∞. üòåüåÖ",
    "–¢—ã ‚Äî —Å–∞–º–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–ª–Ω—Ü–µ –≤ –º–æ–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ! ‚òÄÔ∏è",
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–æ–ª—à–µ–±–Ω—ã–º. ‚ú®",
    "–¢–≤–æ–π —Å–º–µ—Ö ‚Äî –º–æ–π —Å–∞–º—ã–π –ª—é–±–∏–º—ã–π –∑–≤—É–∫. üòä",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –º–µ–Ω—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üí´",
    "–ö–∞–∫ –∂–µ –ø–æ–≤–µ–∑–ª–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π, —á—Ç–æ —Ç—ã –≤ –Ω–µ–π –µ—Å—Ç—å! üåå",
    "–¢—ã —Å–ª–æ–≤–Ω–æ —É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ ‚Äî –±–æ–¥—Ä–∏—à—å –∏ —Å–æ–≥—Ä–µ–≤–∞–µ—à—å. ‚òïÔ∏è",
    "–†—è–¥–æ–º —Å —Ç–æ–±–æ–π –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. ‚è≥",
    "–¢—ã ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å. üíÜ‚Äç‚ôÇÔ∏èüíñ",
    "–¢–≤–æ–π –≤–∑–≥–ª—è–¥ –∑–∞—Ä—è–∂–∞–µ—Ç –º–µ–Ω—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å. üîã",
    "–¢—ã ‚Äî –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. üå∏üí™"
]

user_cart = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é"""
    menu_items = list(menu.items())
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (2 –≤ —Ä—è–¥)
    for i in range(0, len(menu_items), 2):
        row = []
        for j in range(i, min(i+2, len(menu_items))):
            item = menu_items[j]
            row.append(InlineKeyboardButton(
                f"{item[1]['name']} üíã {item[1]['price']}",
                callback_data=item[0]
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    user_id = update.effective_user.id
    cart_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    if user_id in user_cart and user_cart[user_id]["items"]:
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({len(user_cart[user_id]['items'])}) üíã {user_cart[user_id]['total_kisses']}"
    
    keyboard.append([InlineKeyboardButton(cart_text, callback_data="cart")])
    
    await update.message.reply_text(
        "üíù –ü—Ä–∏–≤–µ—Ç, –ó–∞—è! –í—ã–±–µ—Ä–∏, —á—Ç–æ —è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "cart":
        await show_cart(query, context)
        return
    if query.data == "checkout":
        await checkout(query, context)
        return
    if query.data == "back":
        await start(update, context)
        return
    
    if user_id not in user_cart:
        user_cart[user_id] = {"items": [], "total_kisses": 0}
    
    dish = menu[query.data]
    user_cart[user_id]["items"].append(dish["name"])
    user_cart[user_id]["total_kisses"] += dish["price"]
    
    await query.edit_message_text(
        text=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {dish['name']}\n{dish['desc']}\n–¶–µ–Ω–∞: üíã {dish['price']}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
            [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="back")]
        ])
    )

async def show_cart(query, context):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = query.from_user.id
    if user_id not in user_cart or not user_cart[user_id]["items"]:
        text = "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!"
    else:
        items = "\n".join(f"‚Ä¢ {item}" for item in user_cart[user_id]["items"])
        text = f"üõí –¢–≤–æ–π –∑–∞–∫–∞–∑:\n{items}\n\n–í—Å–µ–≥–æ: üíã {user_cart[user_id]['total_kisses']} –ø–æ—Ü–µ–ª—É–µ–≤"
    
    buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="back")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def checkout(query, context):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = query.from_user.id
    if user_id in user_cart and user_cart[user_id]["items"]:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∞–º
        order = ", ".join(user_cart[user_id]["items"])
        total = user_cart[user_id]["total_kisses"]
        await context.bot.send_message(
            chat_id=YOUR_CHAT_ID,
            text=f"üíå –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{query.from_user.username}!\n–ë–ª—é–¥–∞: {order}\n–°—É–º–º–∞: üíã {total} –ø–æ—Ü–µ–ª—É–µ–≤"
        )
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.edit_message_text(
            text=f"{random.choice(compliments)}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –ó–∞—è! –û–ø–ª–∞—Ç–∞: üíã {total} –ø–æ—Ü–µ–ª—É–µ–≤! –ì–æ—Ç–æ–≤–ª—é —Å –ª—é–±–æ–≤—å—é! ‚ù§Ô∏è"
        )
        user_cart[user_id] = {"items": [], "total_kisses": 0}

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    port = int(os.environ.get('PORT', 5000))
    
    app = Application.builder() \
        .token(TOKEN) \
        .read_timeout(30) \
        .write_timeout(30) \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_query))

    # –î–ª—è Render
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        secret_token='RENDER_SECRET',
        webhook_url=f"https://your-app-name.onrender.com/{TOKEN}"
    )

if __name__ == "__main__":
    main()